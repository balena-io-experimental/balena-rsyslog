# Rsyslog configs for streaming from a balenaOS device
#
# Author: Christina Ying Wang <christina@balena.io>

# Load journal-reading module
#
# This module and mmjsonparse are not built-ins and need to be explicitly loaded
module(load="imjournal"
    # Write here where we left off
    StateFile="/var/run/rsyslog/journal.state"
    # Update the state file every 100 messages
    PersistStateInterval="100"
)

# Journal entries are read as JSON, load this to parse them
module(load="mmjsonparse")
action(type="mmjsonparse")

# Add necessary extra fields for balena log aggregator
#
# NOTES:
# - $!FIELD is a selector to acquire the value of a JSON key equal to FIELD
# - `set` adds a key-value pair to the current parsed JSON object
# - Prefer to set bool fields as string '0'/'1' instead of 'true'/'false' because
#   both 'true' & 'false' convert to `true` as a bool
# - Backticks may be used in the config to run a terminal command such as `echo` 
#   for container env vars
#
if $!PRIORITY == "3" then {
    set $!isStdErr = "1";
} else {
    # TODO: Check if we can skip isStdErr on false to save bandwidth
    set $!isStdErr = "0";
}

if $!CONTAINER_NAME == "balena_supervisor" or $!CONTAINER_NAME == "resin_supervisor" then {
    set $!isSystem = "1";
    # # See log-stream template below for why we need this conditional comma.
    set $!isSystemComma = ",";
} else {
    # This is where we would parse the imageId from the container name
    # using ^[a-zA-Z0-9][a-zA-Z0-9_\.\-]*_([0-9]+)_[0-9]+(?:_\w{32,})?$
    # if we need to, once we figure it out.
    #
    # TODO: "aaa_123_645_789_ddd".match(/.*_(\d+)_(\d+)($|_(.+)$)/), we can match
    # using the command line.
    # 
    # As for serviceId, we'd need to add `io.balena.service-id` as a 
    # log-opt label to each service through the Supervisor to access it.
    #
    # TODO: Discuss whether we need imageId and serviceId fields. 
    #
    # For now they're provided to rsyslog as env vars. The env var 
    # imageId and serviceId should match those of the `logger` test
    # service that's pushed with rsyslog. This is not viable as-is
    # with multicontainer and is strictly for testing.
    set $!imageId = `echo $IMAGE_ID`;
    set $!imageIdComma = ",";
    set $!serviceId = `echo $SERVICE_ID`;
    set $!serviceIdComma = ",";
}

# if $!CONTAINER_ID_FULL == "" then {
#     ~
# }

# Output template that simply writes the parsed JSON
# template(name="all-json" type="list") {
#     property(name="$!all-json")
#     constant(value="\n")
# }

# We could set format=jsonf here to automatically add commas between
# fields as well as curly braces, but there is no option to add a newline
# for the ndjson which the balena log aggregator requires.
template(
    name="log-stream" 
    type="list" 
    option.casesensitive="on"
) {
    constant(value="{")
    # Timestamp formatted to Unix (microseconds -> ms)
    property(
        format="jsonf"
        # Slice off the last 3 numbers from timestamp,
        # which is equivalent to dividing by 1000 then flooring.
        position.relativeToEnd="on"
        position.from="255"
        position.to="4"
        datatype="number"
        outname="timestamp" 
        name="$!_SOURCE_REALTIME_TIMESTAMP"
    )
    # Message
    constant(value=",")
    property(
        format="jsonf"
        # TODO: Add '[...]' if truncated
        position.to=`echo $MAX_MESSAGE_LENGTH`
        outname="message" 
        name="$!msg"
    )
    # imageId
    property(
        format="json"
        onEmpty="skip"
        name="$!imageIdComma"
    )
    property(
        format="jsonf"
        datatype="number"
        onEmpty="skip"
        outname="imageId"
        name="$!imageId"
    )
    # serviceId
    property(
        format="json"
        onEmpty="skip"
        name="$!serviceIdComma"
    )
    property(
        format="jsonf"
        datatype="number"
        onEmpty="skip"
        outname="serviceId"
        name="$!serviceId"
    )
    # isStdErr
    constant(value=",")
    property(
        format="jsonf"
        datatype="bool"
        outname="isStdErr"
        name="$!isStdErr"
    )
    # isSystem
    # Because isSystem is skipped on empty, we need the preceding comma
    # to skip on empty as well to prevent a comma formatting error.
    # The format needs to be json because otherwise onEmpty is not allowed.
    property(
        format="json"
        onEmpty="skip"
        name="$!isSystemComma"
    )
    property(
        format="jsonf"
        datatype="bool"
        onEmpty="skip"
        outname="isSystem"
        name="$!isSystem"
    )
    # LF
    constant(value="}\n")
}

# Output unformatted JSON for tests pt. 1
#
# action(type="omfile" File="/var/log/rsyslog/rsyslog.json.log" template="all-json")
#

# Output formatted JSON for tests pt. 2
#
# action(
#     type="omfile" 
#     File="/var/log/rsyslog/rsyslog.log" 
#     template="log-stream"
# )
#

# Output to named pipe for tests pt. 3
#
# Optionally use https://github.com/jpschroeder/pipe-to-me for testing
#
action(
    type="ompipe"
    tryResumeReopen="on"
    Pipe=`echo $PIPE_PATH`
    template="log-stream"
)
#
